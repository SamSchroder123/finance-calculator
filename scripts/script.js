let output = "";
let numInput;
const ms = 5; // Delay in milliseconds
const dp = 5;
let entered = () => {
  console.log("no promise yet");
};

let calculationsArr = [
  {
    id: "none",
    function: () => {
      console.log("none selected");
    },
  },
  {
    id: "gross-rental-income",
    description:
      "Calculates the total annual income generated from renting out the property before any expenses.",
    async function() {
      console.log("gross-rental-income selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();

      let anr = 0;
      let occRate = 0;
      await typewrite(this.questions[0]);
      let awaitingInput = new Promise((resolve) => {
        entered = resolve;
      });
      anr = await awaitingInput;

      console.log("finished waiting for input");
      await typewrite(this.questions[1]);

      awaitingInput = new Promise((resolve) => {
        entered = resolve;
      });

      occRate = await awaitingInput;

      let answer = anr * occRate * 365;
      typewrite("Your Gross Rental Income is £" + answer + " per year.");
      addRow(this.id, answer);
      return;
    },
    questions: {
      0: "What is your average nightly rate? /£: ",
      1: "What is your occupancy rate?: ",
    },
  },
  {
    id: "operating-expenses",
    description:
      "Summarizes all expenses associated with operating the rental property.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();

      let answers = [];
      let qs;
      qs = Object.values(this.questions);
      for (let question in this.questions) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let sum = 0;
      console.log(answers);
      for (num of answers) {
        sum += parseFloat(num);
      }
      const answer = sum;
      typewrite("Your total operating expense is £" + answer + " per year.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What are your total fixed costs? (Mortgage payments, property taxes, insurance, HOA fees .etc) /£: ",
      1: "What are your total variable costs? (Utilities, maintenance, cleaning fees, management fees .etc) /£: ",
      2: "What are your total platform fees? (Fees from booking platforms like Airbnb or VRBO .etc) /£: ",
      3: "What are your total other costs? (Marketing expenses, supplies, legal fees .etc) /£: ",
    },
  },
  {
    id: "net-operating-income",
    description:
      "Represents the annual income generated by the property after deducting operating expenses but before mortgage payments and taxes.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let GRI = findResult("gross-rental-income");
      let OE = findResult("operating-expenses");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (GRI !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(GRI.innerHTML);
      }
      if (OE !== undefined) {
        qs[1] = undefined;
        answers[1] = parseFloat(OE.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = 0;
      answer = answers[0] - answers[1];
      typewrite("Your Net Operating Income (NOI) is £" + answer + " per year.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your gross rental income? /£: ",
      1: "What is your total operating expenses? /£: ",
    },
  },
  {
    id: "cash-flow",
    description:
      "Calculates the annual cash flow after accounting for mortgage payments.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let NOI = findResult("net-operating-income");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);
      if (NOI !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(NOI.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }

        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = 0;
      answer = answers[0] - answers[1];
      typewrite("Your Cash Flow is £" + answer + " per year.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your Net Operating Income (NOI)? /£: ",
      1: "What is your Debt Service (annual mortgage payments, principal plus interest)? /£: ",
    },
  },
  {
    id: "cap-rate",
    description:
      "Measures the rate of return on the property based on the NOI and purchase price.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let NOI = findResult("net-operating-income");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);
      if (NOI !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(NOI.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = (answers[0] / answers[1]) * 100;
      typewrite("Your Capitalization Rate (Cap Rate) is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your Net Operating Income (NOI)? /£: ",
      1: "What is the property purchase price? /£: ",
    },
  },
  {
    id: "roi",
    description: "Calculates the percentage return on the initial investment.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let CF = findResult("cash-flow");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (CF !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(CF.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = (answers[0] / answers[1]) * 100;
      typewrite("Your Return on Investment (ROI) is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your annual cash flow? /£: ",
      1: "What is your total cash invested? /£: ",
    },
  },
  // {
  //   id: "cash-on-cash-return",
  //   description:
  //     "Calculates the cash-on-cash return based on annual cash flow relative to the cash invested.",
  //   async function() {
  //     console.log(this.id + " selected");
  //     let answers = [];
  //     let qs;
  //     qs = Object.values(this.questions);
  //     for (let question in qs) {
  //       console.log("considering this question: " + question);
  //       await typewrite(this.questions[question]);
  //       awaitingInput = new Promise((resolve) => {
  //         entered = resolve;
  //       });
  //       answers[question] = await awaitingInput;
  //     }
  //     let answer = (answers[0] / answers[1]) * 100;
  //     typewrite("Your Cash-on-Cash Return is " + answer + "%.");
  //     addRow(this.id, answer);
  //   },
  //   questions: {
  //     0: "What is your annual cash flow? /£: ",
  //     1: "What is your total cash invested? /£: ",
  //   },
  // },
  {
    id: "break-even-occupancy-rate",
    description:
      "Determines the minimum occupancy rate needed to cover all expenses.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let OE = findResult("operating-expenses");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (OE !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(OE.innerHTML);
      }

      for (let question in qs) {
        console.log("considering this question: " + question);
        if (qs[question] == undefined) {
          continue;
        }
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = (answers[0] / (answers[1] * 365)) * 100;
      typewrite("Your Break-Even Occupancy Rate is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What are your total annual expenses? /£: ",
      1: "What is your average nightly rate? /£: ",
    },
  },
  {
    id: "debt-coverage-ratio",
    description:
      "Measures the property's ability to cover its debt obligations. A DCR greater than 1 indicates that the property generates enough income to cover its debt payments.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let NOI = findResult("net-operating-income");
      let DS = findResult("cash-flow");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (NOI !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(NOI.innerHTML);
      }
      if (DS !== undefined) {
        qs[1] = undefined;
        answers[1] = parseFloat(DS.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = answers[0] / answers[1];
      typewrite("Your Debt Coverage Ratio (DCR) is " + answer + ".");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your Net Operating Income (NOI)? /£: ",
      1: "What is your Debt Service (annual mortgage payments, principal plus interest)? /£: ",
    },
  },
  {
    id: "gross-rent-multiplier",
    description:
      "Provides a quick estimate of the property's value based on its rental income. Lower GRMs indicate better investment opportunities.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let GRI = findResult("gross-rental-income");
      let PP = findResult("cap-rate");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (GRI !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(GRI.innerHTML);
      }
      if (PP !== undefined) {
        qs[1] = undefined;
        answers[1] = parseFloat(PP.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = answers[1] / answers[0];
      typewrite("Your Gross Rent Multiplier (GRM) is " + answer + ".");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your Gross Rental Income (GRI)? /£: ",
      1: "What is the property purchase price? /£: ",
    },
  },
  {
    id: "payback-period",
    description:
      "Calculates the number of years it will take to recover the initial investment from the property's cash flow.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let CF = findResult("cash-flow");
      let TCI = findResult("roi");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (CF !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(CF.innerHTML);
      }
      if (TCI !== undefined) {
        qs[1] = undefined;
        answers[1] = parseFloat(TCI.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = answers[1] / answers[0];
      typewrite("Your Payback Period is " + answer + " years.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is your annual cash flow? /£: ",
      1: "What is your total cash invested? /£: ",
    },
  },
  {
    id: "annual-appreciation-rate",
    description:
      "Estimates the annual appreciation rate of the property value over time.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();

      let answers = [];
      let qs;
      qs = Object.values(this.questions);
      for (let question in qs) {
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = ((answers[0] - answers[1]) / answers[1]) * (1 / answers[2]);
      typewrite("Your Annual Appreciation Rate is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is the current property value? /£: ",
      1: "What is the purchase price? /£: ",
      2: "How many years have you held the property? /years: ",
    },
  },
  {
    id: "expense-ratio",
    description:
      "Measures the proportion of income that goes toward operating expenses. A lower expense ratio indicates higher profitability.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();
      let OE = findResult("operating-expenses");
      let GRI = findResult("gross-rental-income");

      let answers = [];
      let qs;
      qs = Object.values(this.questions);

      if (OE !== undefined) {
        qs[0] = undefined;
        answers[0] = parseFloat(OE.innerHTML);
      }
      if (GRI !== undefined) {
        qs[1] = undefined;
        answers[1] = parseFloat(GRI.innerHTML);
      }

      for (let question in qs) {
        if (qs[question] == undefined) {
          continue;
        }
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = (answers[0] / answers[1]) * 100;
      typewrite("Your Expense Ratio is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What are your total operating expenses? /£: ",
      1: "What is your Gross Rental Income (GRI)? /£: ",
    },
  },
  {
    id: "loan-to-value-ratio",
    description:
      "Indicates the ratio of the loan amount to the property's value. It is used by lenders to assess risk.",
    async function() {
      console.log(this.id + " selected");

      await typewrite(toTitleCase(this.id.split("-").join(" ")) + " selected.");
      await wait();
      await typewrite(this.description);
      await wait();

      let answers = [];
      let qs;
      qs = Object.values(this.questions);
      for (let question in qs) {
        console.log("considering this question: " + question);
        await typewrite(this.questions[question]);
        awaitingInput = new Promise((resolve) => {
          entered = resolve;
        });
        answers[question] = await awaitingInput;
      }
      let answer = (answers[0] / answers[1]) * 100;
      typewrite("Your Loan-to-Value Ratio (LTV) is " + answer + "%.");
      addRow(this.id, answer);
    },
    questions: {
      0: "What is the loan amount? /£: ",
      1: "What is the current property value? /£: ",
    },
  },
];

function stringToArr(text) {
  text = text.split("");
  return text;
}

async function timeoutFunction(Arr, index, ms) {
  console.log("running timeoutFunction()");
  const display = document.getElementById("display-text");
  return new Promise((resolve) => {
    setTimeout(() => {
      const display = document.getElementById("display-text");
      let char = Arr[index];
      output += char;
      display.innerHTML = output;
      resolve();
    }, ms);
  });
}

async function wait(milliseconds = 2500) {
  return new Promise((resolve) => {
    setTimeout(() => {
      console.log("waited " + milliseconds / 1000 + " seconds");
      resolve();
    }, milliseconds);
  });
}

async function typewrite(text) {
  console.log("running typewrite()");
  disableInput();
  output = "";
  let textArr = stringToArr(text);
  for (let i = 0; i < textArr.length; i++) {
    await timeoutFunction(textArr, i, ms);
  }
  console.log("enabling input");
  enableInput();
  return;
}

async function init(calcArr) {
  const display = document.getElementById("display-text");
  display.innerHTML = ""; // Clear display before starting the typewriter effect
  const dropDown = document.getElementById("calculation");
  for (let calculation of calcArr) {
    let newCalc = document.createElement("option");
    newCalc.setAttribute("value", calculation.id);
    newCalc.innerHTML = toTitleCase(calculation.id.split("-").join(" "));
    dropDown.appendChild(newCalc);
  }
  output = ""; // Reset the output
  await typewrite("Welcome to the financial calculator!");
  let calculation = document.getElementById("calculation");
  calculation.setAttribute("onchange", "calculationChange(calculationsArr)");
}

async function calculationChange(calcArr) {
  console.log("calculation change");
  for (const obj of calcArr) {
    if (obj.id === document.getElementById("calculation").value) {
      await obj.function();
      return;
    }
  }
}

function enableInput() {
  console.log("running enableInput()");
  let buttons = document.getElementsByClassName("numeric-button");
  let enter = document.getElementById("enter-button");
  let inputField = document.getElementById("calc-input");
  for (let index = 0; index < buttons.length; index++) {
    const element = buttons[index];
    element.setAttribute("style", "background-color: none;");
    element.setAttribute("onclick", "numericClick(this)");
  }
  inputField.setAttribute("style", "background-color: none;");
  enter.setAttribute("onclick", "enterClick()");
  enter.setAttribute("style", "background-color: none;");
}

function disableInput() {
  let buttons = document.getElementsByClassName("numeric-button");
  let enter = document.getElementById("enter-button");
  let inputField = document.getElementById("calc-input");
  for (let index = 0; index < buttons.length; index++) {
    const element = buttons[index];
    element.setAttribute("style", "background-color: red;");
    element.setAttribute("onclick", "() => {}");
  }
  inputField.setAttribute("style", "background-color: red;");
  enter.setAttribute("onclick", "() => {}");
  enter.setAttribute("style", "background-color: red;");
}

function numericClick(button) {
  numInput = undefined;
  console.log("running numericClick()");
  const display = document.getElementById("display-text");
  if (isNaN(display.innerHTML) && display.innerHTML != "-") {
    display.innerHTML = "";
  }
  if (button.innerHTML === "C" && !isNaN(display.innerHTML)) {
    display.innerHTML = display.innerHTML.slice(
      0,
      display.innerHTML.length - 1
    );
    return;
  }
  if (button.innerHTML === "-" && display.innerHTML !== "") {
    return;
  }
  if ((display.innerHTML + button.innerHTML).split(".").length > 2) {
    return;
  }
  display.innerHTML += button.innerHTML;
}

function enterClick() {
  console.log("running enterClick()");
  console.log(document.getElementById("display-text").innerHTML.split(""));
  console.log(parseFloat(document.getElementById("display-text").innerHTML));
  if (isNaN(document.getElementById("display-text").innerHTML)) {
    return;
  } else {
    numInput = parseFloat(document.getElementById("display-text").innerHTML);
    console.log(numInput + " entered");
    entered(numInput);
    return;
  }
}

function addRow(calculation, result) {
  let calcTd = document.createElement("td");
  calcTd.innerHTML = toTitleCase(calculation.split("-").join(" "));
  let resultTd = document.createElement("td");
  let dpMultiplier = 1 * 10 ** dp;
  let resultDP = Math.round(result * dpMultiplier) / dpMultiplier;
  resultTd.innerHTML = resultDP;
  resultTd.setAttribute("class", "result");
  resultTd.setAttribute("data-id", calculation);
  let row = document.createElement("tr");
  row.appendChild(calcTd);
  row.appendChild(resultTd);
  let results = document.getElementById("results-table");
  results.appendChild(row);
}

function toTitleCase(str) {
  return str.replace(/\w\S*/g, function (txt) {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
}

function findResult(id) {
  let results = document.getElementsByClassName("result");
  console.log(results);
  for (let result of results) {
    if (result.getAttribute("data-id") === id) {
      return result;
    }
  }
  return undefined;
}

init(calculationsArr);
